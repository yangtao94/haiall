/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gg;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author yangt
 */
public class nbaDraft extends javax.swing.JFrame {
public static List<String> teams;
private int size;
private static List<JTextField> textFields = new ArrayList<>();
private static List<int[]> possibleCombination;

    /**
     * Creates new form nbaDraft
     */
    public nbaDraft() {
        initComponents();
        teams = new ArrayList<>();
        size = 14;
        
        possibleCombination = new ArrayList<int[]>();
        textFields = new ArrayList<>();
        
        textFields.add(jTextField1);
        textFields.add(jTextField2);
        textFields.add(jTextField3);
        textFields.add(jTextField4);
        textFields.add(jTextField5);
        textFields.add(jTextField6);
        textFields.add(jTextField7);
        textFields.add(jTextField8);
        textFields.add(jTextField9);
        textFields.add(jTextField10);
        textFields.add(jTextField11);
        textFields.add(jTextField12);
        textFields.add(jTextField13);
        textFields.add(jTextField14);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Type in the teams in descending order of lottery win chance(%)");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setText("Team1");

        jLabel3.setText("Team2");

        jLabel4.setText("Team3");

        jLabel5.setText("Team4");

        jLabel6.setText("Team5");

        jLabel7.setText("Team6");

        jLabel8.setText("Team7");

        jLabel9.setText("Team8");

        jLabel10.setText("Team9");

        jLabel11.setText("Team10");

        jLabel12.setText("Team11");

        jLabel13.setText("Team12");

        jLabel14.setText("Team13");

        jLabel15.setText("Team14");

        jButton1.setText("Confirm Teams");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear Selection");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setForeground(java.awt.Color.red);
        jButton3.setText("EXIT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(64, 64, 64))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here: Confirm button
        //add in the teams
        for (JTextField a : textFields) {
            teams.add(a.getText());
            System.out.println(a.getText());
        }
        nbaDraft();        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void nbaDraft() {
        //generate winning combination
        
        int [] combinations = {1,2,3,4,5,6,7,8,9,10,11,12,13,14};
        int r = 4;
        int n = combinations.length;
        printCombinations(combinations,n,r);
        //get rid of the last combination : 11,12,13,14
        possibleCombination.remove(1000);
        
        //shuffle the Arraylist, give the combinations to each "team"
        
        List<int[]> allocator = new ArrayList<>();
        for (int [] numbers: possibleCombination) {
            allocator.add(numbers.clone());
        }
        
        Collections.shuffle(allocator);
        
        List<int[]> firstPick = new ArrayList<>(allocator.subList(0, 250)); //250
        List<int[]> secondPick = new ArrayList<>(allocator.subList(250, 449)); //199
        List<int[]> thirdPick = new ArrayList<>(allocator.subList(449, 605)); //156
        List<int[]> fourthPick = new ArrayList<>(allocator.subList(605, 724)); //119
        List<int[]> fifthPick = new ArrayList<>(allocator.subList(724, 812)); //88
        List<int[]> sixthPick = new ArrayList<>(allocator.subList(812, 875)); //63
        List<int[]> seventhPick = new ArrayList<>(allocator.subList(875, 918)); //43
        List<int[]> eighthPick = new ArrayList<>(allocator.subList(918, 946)); //28
        List<int[]> ninthPick = new ArrayList<>(allocator.subList(946, 963)); //17
        List<int[]> tenthPick = new ArrayList<>(allocator.subList(963, 974)); //11
        List<int[]> p11thPick = new ArrayList<>(allocator.subList(974, 982)); //8
        List<int[]> p12thPick = new ArrayList<>(allocator.subList(982, 989)); //7
        List<int[]> p13thPick = new ArrayList<>(allocator.subList(989, 995)); //6
        List<int[]> p14thPick = new ArrayList<>(allocator.subList(995, 1000)); //5
        
        
        List<List<int[]>> lol = new ArrayList<>();


        lol.add(firstPick);
        lol.add(secondPick);
        lol.add(thirdPick);
        lol.add(fourthPick);
        lol.add(fifthPick);
        lol.add(sixthPick);
        lol.add(seventhPick);
        lol.add(eighthPick);
        lol.add(ninthPick);
        lol.add(tenthPick);
        lol.add(p11thPick);
        lol.add(p12thPick);
        lol.add(p13thPick);
        lol.add(p14thPick);
        
        
        
        //generate the 3 winning combinations
        int first = 0; //positions of the winning
        int second = -1;
        int third = -1;
        
        int[] winningCombination = new int[4];
        generateCombi(winningCombination);
        //first
        List<List<int[]>> copy = new ArrayList<>();
        for (List<int[]> index : lol) {
            copy.add(index);

        }
        List<List<int[]>> toRemove = new ArrayList<>();
        for (List<int[]> p : copy) {

            for (int[] comb : p) {
                if (didYouWin(winningCombination, comb)) {
                    first = copy.indexOf(p);
                    toRemove.add(p);
                }

            }

        }
        copy.removeAll(toRemove);
        
        //second
        int[] picking2nd = new int[4];

        do {
            generateCombi(picking2nd);
        } while (didYouWin(winningCombination, picking2nd));

        int second_size = 0;
        while (second == -1) {
            for (List<int[]> p : copy) {

                for (int[] comb : p) {
                    if (didYouWin(picking2nd, comb)) {
                        second = copy.indexOf(p);
                        second_size = p.size();
                        toRemove.add(p);
                    }
                    //lol.remove(p);
                }

            }
            //if none match, then generate the number again
            do {
                generateCombi(picking2nd);
                //continue generating until it is different from the first winning combination
            } while (didYouWin(winningCombination, picking2nd));

        }

        copy.removeAll(toRemove);
       //check with original arraylist
        for (List<int[]> p : lol) {
            if (second_size == p.size()) {
                //determine who gets to pick second in the original array
                second = lol.indexOf(p);

            }
        } 
        
        //draw again to determine third drafting order
        int[] picking3rd = new int[4];

        do {
            generateCombi(picking3rd);
            //must be different from first AND second
        } while (didYouWin(winningCombination, picking3rd) || didYouWin(picking2nd, picking3rd));
        int third_size = 0;
        while (third == -1) {
            for (List<int[]> p : copy) {

                for (int[] comb : p) {
                    if (didYouWin(picking3rd, comb)) {
                        third = copy.indexOf(p);
                        third_size = p.size();
                        toRemove.add(p);
                    }
                    //lol.remove(p);
                }

            }
            //if none match, then generate once again
            do {
                generateCombi(picking3rd);
            } while (didYouWin(winningCombination, picking3rd) || didYouWin(picking2nd, picking3rd));

        }
        copy.removeAll(toRemove);

        for (List<int[]> p : lol) {
            if (third_size == p.size()) {
                //determine who gets to pick second in the original array
                third = lol.indexOf(p);

            }
        }
        
        //consolidate the rest of the draft order
        int[] remainingSize = new int[11];
        int i = 0;
        
        for (List<int[]> p : copy) {
            remainingSize[i++] = p.size();

        }
        //System.out.println("ARRAY SIZE:"+Integer.toString(remainingSize.length));
        Arrays.sort(remainingSize);

        //convert to Hashtable

        //TreeMap so that the keys are sorted (Integers here)
        TreeMap<Integer, Integer> draftOrder = new TreeMap<>();
        draftOrder.put(1,lol.get(first).size());
        draftOrder.put(2,lol.get(second).size());
        draftOrder.put(3,lol.get(third).size());



        for (int j = 0; j < 11; j++) {
            int filler = 4 + 10- j;
            draftOrder.put(filler,remainingSize[j]);

        }
        Set set = draftOrder.entrySet();
        // Get an iterator
        Iterator hi = set.iterator();
        // Display elements
        
        //list that states the order of pick within the original arrayList
        List<Integer> orderAscending = new ArrayList<>(14);
        while(hi.hasNext()) {
            Map.Entry me = (Map.Entry) hi.next();
            orderAscending.add((int) me.getValue()) ;




        }


        int [] magic = rankSort(orderAscending);

        ArrayList<String> finalOrder = new ArrayList<>();

        for (int u = 0 ; u < 14; u++) {
            //int ok = 14-u;
            int magics = magic[magic.length-1-u];

            if (!teams.get(13-magics).equals("")) {
                finalOrder.add(teams.get(13-magics));
            }



        }
        //finalOrder represnts the draftOrder from bottom to Top
        
        System.out.println(Arrays.toString(finalOrder.toArray()));
        int final_size = finalOrder.size();
        int j = 0;
        while ( j < final_size) {
            String message;
            if (j == final_size-1) message = "The 1st pick goes to Team:"+ finalOrder.get(j);
            else if (j == final_size-2) message = "The 2nd pick goes to Team:"+ finalOrder.get(j);
            else if (j == final_size-3) message = "The 3rd pick goes to Team:"+ finalOrder.get(j);
            
            else message = "The " + String.valueOf(final_size-j) + "th pick belongs to Team:" + finalOrder.get(j);
            
            JOptionPane.showMessageDialog(null,message,"Draft Results",JOptionPane.INFORMATION_MESSAGE);
            j++;
        }
            
            
            
        
        
        
        
        
        
    }
    private boolean didYouWin(int[] mine, int[] winning) {
        Arrays.sort(mine);
        Arrays.sort(winning);
        return Arrays.equals(mine,winning);
    }
    private void generateCombi(int [] hello) {
        ArrayList<Integer> list = new ArrayList<>();
        for (int i = 1; i <= 14; i++) {
            list.add(i);
        }
        Random num = new Random();
        
        for (int i = 0; i < hello.length; i++) {
            int index = num.nextInt(list.size());
            hello[i] = list.remove(index);
        }
    }
    
    private static int[] rankSort(List<Integer> array) {

        ArrayList<Integer> newArray = new ArrayList<>();
        for ( int a : array) {
            newArray.add(a);
        }
        //System.out.println(newArray.toString());
        Collections.sort(newArray);
        //System.out.println(newArray.toString());

        ArrayList<Integer> copyArray = new ArrayList<>();
        for (int k : newArray) {
            copyArray.add(k);
        }

        int[] rank = new int[14];
        for (int i = 0; i < 14; i++) {
            if (newArray.get(i) == array.get(i)) {
                rank[i] = 14-i;
                break;
            }



            rank[i] = newArray.indexOf(array.get(i));



        }
        //System.out.println(Arrays.toString(rank));
        return rank;
    }
    
    private void combinationUtil(int [] array, int [] data, int start, int end, int index, int r) {
            //generate all the possible combinations
       if (index == r) {
          int[] hi = new int[4];
          for (int k = 0; k < r; k++) {
              hi[k] = data[k];
          }
           
           possibleCombination.add(hi);
           return;
       }
       
       //replace index with all possible elements.
       
       for (int i = start; i < end && end-i+1 >= r-index; i++) {
           data[index] = array[i];
           combinationUtil(array,data,i+1,end,index+1,r);
           
       }
    
    }
    private void printCombinations(int[] array, int n, int r) {
            int data[] = new int[r];
            combinationUtil(array, data,0,n,0,r);
    }
    
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //exit code!!
        int confirmed = JOptionPane.showConfirmDialog(null, "You sure you wanna quit?","EXIT",JOptionPane.YES_NO_OPTION);
        
        if (confirmed == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Clear every selection
        for (JTextField a : textFields) {
            a.setText("");
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(nbaDraft.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(nbaDraft.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(nbaDraft.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(nbaDraft.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new nbaDraft().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
